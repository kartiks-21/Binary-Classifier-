import numpy as np
import matplotlib.pyplot as plt
import os
import h5py
def load_dataset():
    train_data = h5py.File('train_catvnoncat.h5',"r")
    train_set_x = np.array(train_data["train_set_x"][:])
    train_set_y  = np.array(train_data["train_set_y"][:])
    test_data = h5py.File('test_catvnoncat.h5',"r")
    test_set_x = np.array(test_data["test_set_x"][:])
    test_set_y = np.array(test_data["test_set_y"][:])
    train_set_y = train_set_y.reshape((1, train_set_y.shape[0]))
    test_set_y = test_set_y.reshape((1, test_set_y.shape[0]))
    return train_set_x,train_set_y,test_set_x,test_set_y
def flatten():
    train_set_x,train_set_y,test_set_x,test_set_y = load_dataset()
    train_set_x_flatten = train_set_x.ravel()
    test_set_x_flatten = test_set_x.ravel()
    train_set_y_flatten = train_set_y.ravel()
    test_set_y_flatten = test_set_y.ravel()
    train_set_x_flatten = train_set_x_flatten.reshape((2568192,1))
    train_set_y_flatten = train_set_y_flatten.reshape((209,1))
    test_set_x_flatten = test_set_x_flatten.reshape((614400,1))
    test_set_y_flatten = test_set_y_flatten.reshape((50,1))
    return train_set_x_flatten/255,train_set_y_flatten/255,test_set_x_flatten/255,test_set_y_flatten/255
X_train,Y_train,X_test,Y_test = flatten()
def initialize_with_zeros(dim):
    w = np.zeros(shape=(dim, 1))
    b = 0
    assert (w.shape == (dim, 1))
    assert (isinstance(b, float) or isinstance(b, int))
    return w, b
def sigmoid(z):
    return 1/(1+np.exp(-z))
def equations(w,b,X,Y):
    m = X.shape[1]
    a = sigmoid(np.dot(w.T,X)+b)
    cost = -(Y*np.log(a)+(1-Y)*np.log(1-a))/m
    dw = np.dot(X, (a - Y).T) / m
    db = (np.sum(a - Y)) / m
    cost = np.squeeze(cost)

    grads = {"dw": dw,
             "db": db}

    return grads, cost
def optimize(w,b,X,Y,num_iterations,learning_rate,print_cost):
    costs = []
    
    for i in range(num_iterations):
        
        grads, cost = equations(w,b,X,Y)
        dw = grads["dw"]
        db = grads["db"]
        
        w = w - learning_rate*dw
        b = b - learning_rate*db
        if i % 100 == 0:
            costs.append(cost)

        if print_cost and i % 100 == 0:
            print ("Cost after iteration %i: %f" %(i, cost))
    
    params = {"w": w,
              "b": b}
    
    grads = {"dw": dw,
             "db": db}
    return params, grads, costs
def prediction(w,b,X):
    m = X.shape[1]
    Y_prediction = np.zeros((1, m))
    w = w.reshape(X.shape[0], 1)
    a = sigmoid(np.dot(w.T,X) + b)
    for i in range(a.shape[1]):
        Y_prediction[0, i] = 1 if a[0, i] > 0.5 else 0
    assert (Y_prediction.shape == (1, m))
    return Y_prediction
def model(X_train, Y_train, X_test, Y_test, num_iterations=2000, learning_rate=0.5, print_cost=False):
    w, b = initialize_with_zeros(X_train.shape[0])
    parameters, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost)
    w = parameters["w"]
    b = parameters["b"]
    Y_prediction_test = predict(w, b, X_test)
    Y_prediction_train = predict(w, b, X_train)
    print("train accuracy: {} %".format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100))
    print("test accuracy: {} %".format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100))

    
    d = {"costs": costs,
         "Y_prediction_test": Y_prediction_test, 
         "Y_prediction_train" : Y_prediction_train, 
         "w" : w, 
         "b" : b,
         "learning_rate" : learning_rate,
         "num_iterations": num_iterations}
    
    return d
d = model(X_train,Y_train,X_test,Y_test, num_iterations = 20, learning_rate = 0.005, print_cost = True)